// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	entity "demo-service/internal/entity"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// ConsumeOrder provides a mock function with given fields: ctx, topic, handler
func (_m *Broker) ConsumeOrder(ctx context.Context, topic string, handler func(entity.Order, string) error) error {
	ret := _m.Called(ctx, topic, handler)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(entity.Order, string) error) error); ok {
		r0 = rf(ctx, topic, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTopic provides a mock function with given fields: topic, numPartitions, replicationFactor
func (_m *Broker) CreateTopic(topic string, numPartitions int, replicationFactor int) {
	_m.Called(topic, numPartitions, replicationFactor)
}

// ProduceOrder provides a mock function with given fields: topic, method, order
func (_m *Broker) ProduceOrder(topic string, method string, order entity.Order) error {
	ret := _m.Called(topic, method, order)

	if len(ret) == 0 {
		panic("no return value specified for ProduceOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, entity.Order) error); ok {
		r0 = rf(topic, method, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
