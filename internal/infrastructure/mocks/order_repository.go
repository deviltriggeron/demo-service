// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	entity "demo-service/internal/entity"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// CloseDB provides a mock function with no fields
func (_m *OrderRepository) CloseDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MethodDelete provides a mock function with given fields: orderUID
func (_m *OrderRepository) MethodDelete(orderUID string) error {
	ret := _m.Called(orderUID)

	if len(ret) == 0 {
		panic("no return value specified for MethodDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MethodInsert provides a mock function with given fields: orders
func (_m *OrderRepository) MethodInsert(orders entity.Order) error {
	ret := _m.Called(orders)

	if len(ret) == 0 {
		panic("no return value specified for MethodInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Order) error); ok {
		r0 = rf(orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MethodSelect provides a mock function with given fields: id
func (_m *OrderRepository) MethodSelect(id string) (entity.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for MethodSelect")
	}

	var r0 entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MethodSelectAll provides a mock function with no fields
func (_m *OrderRepository) MethodSelectAll() ([]entity.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MethodSelectAll")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MethodUpdate provides a mock function with given fields: order
func (_m *OrderRepository) MethodUpdate(order entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for MethodUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
