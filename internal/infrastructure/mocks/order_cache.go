// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	entity "demo-service/internal/entity"
)

// OrderCache is an autogenerated mock type for the OrderCache type
type OrderCache struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *OrderCache) Delete(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteAll provides a mock function with no fields
func (_m *OrderCache) DeleteAll() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *OrderCache) Get(id string) (entity.Order, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entity.Order
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (entity.Order, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAll provides a mock function with no fields
func (_m *OrderCache) GetAll() []entity.Order {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func() []entity.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	return r0
}

// Set provides a mock function with given fields: order
func (_m *OrderCache) Set(order entity.Order) {
	_m.Called(order)
}

// SetAll provides a mock function with given fields: orders
func (_m *OrderCache) SetAll(orders []entity.Order) {
	_m.Called(orders)
}

// NewOrderCache creates a new instance of OrderCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderCache {
	mock := &OrderCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
